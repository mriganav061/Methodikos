====== Work Log ======
===== Upcoming Plan =====
  * <del>Add validation logic for "Import" component (9/10~9/13)</del>
  * <del>Testing and debugging "Import" component (9/13~9/14)</del>
  * Further validation logic for provided file will be required in server-side
  * Plan to add user & group services for secured login, signup, logout. Updated demo will be provided after this.
===== Todo (Don't Forget) =====
  * Apache Web Server and Tomcat Integration
  * Fast remote deployment setting (copy .jar files to tomcat /common folder)
  * <del>Integrating AngularJS and RequireJS with current web layout</del> -> This should be handled when asynchronous module loading feature is available in AngularJS in the future
  * <del>Solve hot-deploy problem in eclipse</del>

===== 9/17/2013~9/30/2013 =====
  * Configure HBase and Hbase client (shell and java) in digitalocean cloud
  * Work on Marketing Methodikos front site
  * Researching on integration of CAS (central authentication service)'s rest api, spring security (stateless), and angularjs for authentication

===== 9/11/2013~9/16/2013 =====
  * Researching on secured login, logout flow using AngularJS and RESTful backend server
  * Install bind9 DNS server, Hadoop, Cassandra
  * Implement user table and Cassandra client code
===== 9/4/2013~9/9/2013 =====
  * Implement minimal server with nodejs (www.nodejs.org), expressjs(www.expressjs.com) and mongodb (www.mongodb.org) since the file handling needs server-side logic. Fortunately, nodejs and mongodb allows simple implementation for setting up for web server and database.
  * Add csv module (http://www.adaltas.com/projects/node-csv/) for nodejs to handle csv file so we can parse it and return its content to the client for rendering.

===== 9/1/2013~9/3/2013 =====
  * Make custom directives for modal, wizard, select2 so that they can be reusable in other components in the software
  * grunt build config change so that only modified file will be updated and copied to the build directory which enables rapid development.
  * Memory leak checking meaning when modal disappears and related DOM elements are removed from the DOM tree, the controls and scopes need to be cleaned and destroyed. Otherwise, every time the modal pops up the new memory space will be allocated which gives memory leak
  * Using ng-repeat, ng-include together gives the bug which is fixed in latest angularjs snapshot version
===== 8/27/2013 =====
  * Add Table and wizard interface
===== 8/26/2013 =====
  * Add Breadcrumb services
  * Add Title services
===== 8/23/2013~8/25/2013 =====
  * Change UI template
  * Add AngularUI router
  * Add grunt-contrib-less plugin for less compilation

===== 8/22/2013 =====
  * Decided on removing RequireJs from project since it brings more code complexity than benefit that it is supposed to give. There are some attempting for supporting lazy-loading and dynamic module loading in AngularJS but seems to give more code maintenance work as the app grows up. Let's wait until AngularJS's native support for this dynamic module loading.



===== 8/21/2013 =====
  * Include scss plugin to grunt build since most of my css source files are .scss
  * Include Node server plugin (http://www.node.js) to grunt build
  * Attempt to comply with Angular ui-route to manage views
  * Started implementing "Data" views in methodikos
===== 8/19/2013~8/20/2013 =====
  * Front-end Development Setting for build and unit testing automation using Grunt(http://gruntjs.com/)
  * Project seed is based on ng-boilerplate (https://github.com/joshdmiller/ng-boilerplate)
  * Grunt defines many tasks for building (minification, compilation) single page webpage from sources (coffeescript, javascript libraries and frameworks, images, font, css, less, etc..). It also has unit testing functionality for each module for methodikos. Unit test is running on Karma server with Jasmine and RequireJS framework plugins.
  * Customization of ng-boilerplate seed project is tricky but almost done. (Customization needs to be done because this front-end project final product will also be used for integrating with back-end projects using maven.
===== 8/18/2013 =====
  * Researching on AngularJS's important concepts such as Module, Directive, Services
  * AngularJS project folder and file structure organization for large web application
  * Further researching on some security issue with Single Page Application and how to manage them by integrating spring security
===== 8/17/2013 =====
  * Initial Design
  * {{:methodikos-work-log:layout.png|}}
  * {{:methodikos-work-log:layout2.png|}}
  * {{:methodikos-work-log:wizard_layout.png|}}
===== 8/16/2013 =====
  * Research on current web application trend for front-end. It is somewhat major trend to use JavaScript intensive front-end framework for enhancing application ui responsiveness. This is because high ui responsiveness also enables web application to run on various mobile devices.
  * Research on Front-end (javascript) MVC framework and libraries: AngularJS from Google and Backbone.js
  * Change on front-end project folder structure
  * Integrated with AngularJS(http://angularjs.org/) and RequireJS(http://requirejs.org/)
  * Enabled test-driven development environment for front-end development with Karma

===== 8/15/2013 =====
  * Did Apache Tiles Configuration and continued on Front-end development project setting (JavaScript intensive)
  * Checked Maven overlay build for final product that is built and composited from all other project modules
  * Checked Spring configuration propagation from Repository projects to Web projects
===== 08/14/2013 =====
  * Build Test with multi module maven projects
  * Separate front-end static source (js, css, img) and made separated project which will be built into whole methodikos project (purpose: front-end needs to be developed and tested separately, and will be integrated)
  * Solved hot-deploy problem
===== 08/13/2013 =====
  * Development Environment Setting (Cont.)
    * Setting Multi-module project and modularize maven dependency management
      * methodikos - parent
      * methodikos-data-repository - data access layer project
      * methodikos-data-service - data service layer project
      * methodikos-shared - domain model project
      * methodikos-user-repository - user-related data access layer project
      * methodikos-user-service - user-related service layer project
      * methodikos-web - web resources and servlet creating war file
    * logging library change form log4j to slf4j

===== 08/12/2013 =====
  * Development Environment Setting
    * Apache Server/Tomcat configuration along with remote deployment setup from Eclipse
    * Building Eclipse project folder structure for multi-module project
    * Use Maven modules/parent
    * Researching on domain name